<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technology on Tahir Hashmi</title><link>https://tahirhashmi.com/categories/technology/</link><description>Recent content in Technology on Tahir Hashmi</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><managingEditor>mail@tahirhashmi.com (Tahir Hashmi)</managingEditor><webMaster>mail@tahirhashmi.com (Tahir Hashmi)</webMaster><lastBuildDate>Fri, 09 Dec 2022 11:11:40 +0700</lastBuildDate><atom:link href="https://tahirhashmi.com/categories/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>The MetaComputer™ (Part `What' of 3)</title><link>https://tahirhashmi.com/posts/2022-12-09-metacomputer-what/</link><pubDate>Fri, 09 Dec 2022 11:11:40 +0700</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2022-12-09-metacomputer-what/</guid><description>&lt;p>In &lt;a href="https://tahirhashmi.com/posts/2022-11-27-metacomputer-why"
>part &amp;ldquo;Why&amp;rdquo;&lt;/a> of this series that appeared previously, I talked about the need for a new computing model that simplifies modern cloud-native distributed application development. In this part, I&amp;rsquo;ll go into some details of what this new computing model should be and what it should provide.&lt;/p></description></item><item><title>The MetaComputer™ (Part `Why' of 3)</title><link>https://tahirhashmi.com/posts/2022-11-27-metacomputer-why/</link><pubDate>Sun, 27 Nov 2022 14:26:17 +0700</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2022-11-27-metacomputer-why/</guid><description>&lt;p>It&amp;rsquo;s been a quite a while since I truly enjoyed programming at work. Don&amp;rsquo;t get me wrong. I like wrangling with code to make interesting stuff happen. The problem is that for a long time now, making interesting stuff happen with code hasn&amp;rsquo;t been the end game. Since the last ten years or so, it&amp;rsquo;s become incredibly more complex to get finished code to start working in the real world (aka production). Some say it&amp;rsquo;s because we &lt;a href="https://twitter.com/jasoncwarner/status/1592227285024636928"
target="_blank"
>OD&amp;rsquo;d on microservices&lt;/a>. That probably true but there&amp;rsquo;s more to it than that alone.&lt;/p></description></item><item><title>Using a QLC SSD for Backups. Am I Insane?</title><link>https://tahirhashmi.com/posts/2020/09/10/using-a-qlc-ssd-for-backups-makes-sense/</link><pubDate>Thu, 10 Sep 2020 15:06:37 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2020/09/10/using-a-qlc-ssd-for-backups-makes-sense/</guid><description>I have a properly working Seagate Backup Plus Hub. However, I’m now using a Samsung 870 QVO for Time Machine backups on my Mac, despite its bottom-of-the-pile TBW (durability) rating. It actually makes sense.
The Backstory I have a 2017 iMac (bought that year as well) which I use as my primary home computer for photo/video editing, a bit of programming and a lot of Netflix and HBO Go as well.</description></item><item><title>Buy or Build?</title><link>https://tahirhashmi.com/posts/2020/04/18/buy-or-build/</link><pubDate>Sat, 18 Apr 2020 06:58:04 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2020/04/18/buy-or-build/</guid><description>One of the decisions a CTO has to frequently make is whether to build some piece of functionality in-house or buy it from a third party vendor. In this post, I share my framework for making these decisions.
I also include a case study each for a buy decision and a build decision. Added bonus – some thoughts on whether you should sell something you’ve decided to build.
Functional Complexity One of the most important determinants of buy-vs-build decisions will be the ability to spec out the entire functionality.</description></item><item><title>5 Competitive Advantages in Technology</title><link>https://tahirhashmi.com/posts/2019/01/19/5-competitive-advantages-in-technology/</link><pubDate>Sat, 19 Jan 2019 07:47:52 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2019/01/19/5-competitive-advantages-in-technology/</guid><description>The technology universe is in a constant state of flux with new advancements arriving faster than one could keep up. A technology leader, in this scenario, needs to look for something durable to build the foundation of their new (or improved) technology organisation.
Spending 36 months leading the charge (and occasionally failing) at a fast growing business that’s powered by technology can teach a lot. Coming off the back of a career built with customer-facing development teams at companies serving over 100 million customers, I now have some idea of what it takes to make a strong technology foundation for a modern business.</description></item><item><title>The Best Feature of Go</title><link>https://tahirhashmi.com/posts/2018/06/01/best-feature-of-go/</link><pubDate>Fri, 01 Jun 2018 10:12:41 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2018/06/01/best-feature-of-go/</guid><description>I’ve been programming since the late 90’s and I’ve done quite a bit of coding in C, C++, a lot of it in PHP and some in Python as well. On the front-end I’ve done some JavaScript and I’ve also had the misfortune of programming in Java 😉
I started programming in Go in 2012 and since then I haven’t wanted to program in any other language. I’ve had a handful of large Go implementations across two companies and by now I have my own short list of favourite features.</description></item><item><title>Inheritance Semantics in Go</title><link>https://tahirhashmi.com/posts/2014/01/22/inheritance-semantics-in-go/</link><pubDate>Wed, 22 Jan 2014 11:16:12 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2014/01/22/inheritance-semantics-in-go/</guid><description>Contemporary application design discipline is deeply rooted in Object Oriented Analysis and Design and inheritance is a key concept in OOAD. Go does not support classes and inheritance in their classic OOP sense but since many of us are trained in OOP, the loss of an important design concept sometimes feels restrictive.
Even though I knew about embedding and interfaces, their connection with classic inheritance wasn’t quite obvious. I set out to understand how I could emulate the coarse inheritance semantics in Go, without going into fine nuances.</description></item><item><title>Mapping OO Interfaces to REST</title><link>https://tahirhashmi.com/posts/2013/10/28/mapping-oo-interfaces-to-rest/</link><pubDate>Mon, 28 Oct 2013 09:35:46 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/10/28/mapping-oo-interfaces-to-rest/</guid><description>A few days ago, my BBF (Big Boss Forever) Vijay R asked the following question:
Any resources on how to map OO design (controlled state change via methods) to RESTful services? #help
— Vijay Ramachandran (@vijay750) October 24, 2013
Here’s what I think about it. There are a few things that are very different about designing HTTP APIs as compared to language-native implementation design:
The goal of an HTTP API is to minimise coupling and facilitate interoperability, which is less of a concern when the usage environment is restricted to a single programming language and its runtime</description></item><item><title>Need a new Start-up Idea? Mash up Social and Cloud</title><link>https://tahirhashmi.com/posts/2011/09/19/new-start-up-idea/</link><pubDate>Mon, 19 Sep 2011 10:19:55 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2011/09/19/new-start-up-idea/</guid><description>Are you based out of India and need an idea for a technology start-up? Try thinking of two of the biggest technology buzzwords of the day and mash ’em up together. Social + Cloud!
Back in the ol’ days when system programming and desktop applications were hot, people were trying to create applications that could run on more than one OS. There was a sprouting of libraries, proprietary and open source, that promised abstraction from the operating system internals.</description></item><item><title>Beating the TripAdvisor Badge’s SEO Tactic</title><link>https://tahirhashmi.com/posts/2010/08/24/beating-tripadvisor-seo/</link><pubDate>Tue, 24 Aug 2010 10:16:38 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/08/24/beating-tripadvisor-seo/</guid><description>The Problem Recently, I got a reference to this article from my Product Manager, regarding TripAdvisor badges and how they boost SEO. Their secret is a simple link that links deep into TripAdvisor website and makes your site a donor of link love to TripAdvisor. This is somewhat bad for hotel owners who might find that TripAdvisor trumps the search ranking for their brand name.
The easy solution to prevent that from happening would be to slightly edit TA widget and use a rel=&amp;quot;nofollow&amp;quot; attribute in the anchor that links to TripAdvisor.</description></item><item><title>Simple PHP Timer</title><link>https://tahirhashmi.com/posts/2010/08/09/simple-php-timer/</link><pubDate>Mon, 09 Aug 2010 12:23:45 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/08/09/simple-php-timer/</guid><description>I was just trying to profile an HTML page for performance bottle-necks. I’m trying to follow a top-down approach, wherein I start from the entry script, and find the block of code that takes the biggest chunk of time before digging deeper into that chunk.
At this stage, it’s not feasible to drop in a full-blown profiling tool like xdebug because of the set-up overhead and amount of data it generates.</description></item><item><title>PHP vs. Python for Web Apps</title><link>https://tahirhashmi.com/posts/2010/07/28/php-vs-python-for-web-apps/</link><pubDate>Wed, 28 Jul 2010 12:00:42 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/07/28/php-vs-python-for-web-apps/</guid><description>These days, more and more people ask the Python vs. PHP question when they start out with a web application from scratch. I’ve developed PHP applications for 5 years but for the last couple of years I’ve been doing Python. This post is meant to note some of my observations. If you don’t want to read the whole of it, my opinion — opinion — is to stick with PHP for dishing out your *ML.</description></item><item><title>MySQLdb Leaks Memory</title><link>https://tahirhashmi.com/posts/2010/06/30/mysqldb-leaks-memory/</link><pubDate>Wed, 30 Jun 2010 11:32:30 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/06/30/mysqldb-leaks-memory/</guid><description>Whenever people search for a Python library for MySQL, they get directed to MySQL for Python. However, there are some nasties hidden in it. Searching for “mysql python memory leaks” results in a few links which suggest that using Unicode causes memory leaks with the library.
Today, however, I found another cause for MySQLdb memory leaks, while debugging a leaky Python daemon at work — database errors.
Use this script:</description></item><item><title>{Browse ‘Hello World!’}</title><link>https://tahirhashmi.com/posts/2010/06/18/hello-world/</link><pubDate>Fri, 18 Jun 2010 15:21:35 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/06/18/hello-world/</guid><description>That snippet of Oz somehow felt like an appropriate title for the first post on my tech blog. Expect something new here once in a while. Happy hacking! 🙂</description></item></channel></rss>