<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Tahir Hashmi</title><link>https://tahirhashmi.com/categories/programming/</link><description>Recent content in Programming on Tahir Hashmi</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><managingEditor>mail@tahirhashmi.com (Tahir Hashmi)</managingEditor><webMaster>mail@tahirhashmi.com (Tahir Hashmi)</webMaster><lastBuildDate>Fri, 01 Jun 2018 10:12:41 +0000</lastBuildDate><atom:link href="https://tahirhashmi.com/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>The Best Feature of Go</title><link>https://tahirhashmi.com/posts/2018/06/01/best-feature-of-go/</link><pubDate>Fri, 01 Jun 2018 10:12:41 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2018/06/01/best-feature-of-go/</guid><description>I‚Äôve been programming since the late 90‚Äôs and I‚Äôve done quite a bit of coding in C, C++, a lot of it in PHP and some in Python as well. On the front-end I‚Äôve done some JavaScript and I‚Äôve also had the misfortune of programming in Java üòâ
I started programming in Go in 2012 and since then I haven‚Äôt wanted to program in any other language. I‚Äôve had a handful of large Go implementations across two companies and by now I have my own short list of favourite features.</description></item><item><title>Inheritance Semantics in Go</title><link>https://tahirhashmi.com/posts/2014/01/22/inheritance-semantics-in-go/</link><pubDate>Wed, 22 Jan 2014 11:16:12 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2014/01/22/inheritance-semantics-in-go/</guid><description>Contemporary application design discipline is deeply rooted in Object Oriented Analysis and Design and inheritance is a key concept in OOAD. Go does not support classes and inheritance in their classic OOP sense but since many of us are trained in OOP, the loss of an important design concept sometimes feels restrictive.
Even though I knew about embedding and interfaces, their connection with classic inheritance wasn‚Äôt quite obvious. I set out to understand how I could emulate the coarse inheritance semantics in Go, without going into fine nuances.</description></item><item><title>The Compiler as a Refactoring Aid</title><link>https://tahirhashmi.com/posts/2013/01/23/the-compiler-as-a-refactoring-aid/</link><pubDate>Wed, 23 Jan 2013 14:15:14 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/01/23/the-compiler-as-a-refactoring-aid/</guid><description>Recently, I sat down to refactor a Go application with a high-level design objective in place. The application had two conceptually separate entities implemented in different files but mashed into a single package. I needed to separate them out into their own packages. I wasn‚Äôt using an IDE ‚Äî just Emacs with basic formatting and non-contextual auto-complete aids.
I started out by creating a new directory for the package to be split out and moved the files that contained most of the relevant code into that directory, without thinking of the consequences.</description></item><item><title>Go Workshop</title><link>https://tahirhashmi.com/posts/2013/01/21/go-workshop/</link><pubDate>Mon, 21 Jan 2013 11:56:29 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/01/21/go-workshop/</guid><description>Last week, I conducted a 2 day Go Workshop at my workplace. It was fun.
I started day 1 with the excellent Go at Google presentation by Rob Pike, followed by my own presentation of Go‚Äôs key features. The rest of Day 1 was spent taking the Go Tour.
The coolest thing I did was on day 2. I mirrored my laptop on the projector and went through a fresh install of Go from source on my [newly allocated] dev box.</description></item><item><title>Why I Program in Go</title><link>https://tahirhashmi.com/posts/2013/01/05/why-program-in-go/</link><pubDate>Sat, 05 Jan 2013 11:06:00 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/01/05/why-program-in-go/</guid><description>Go is a fresh new programming language, that has come out of Google and is primarily targeted towards server development. It is developed by some very accomplished computer scientists, like Ken Thompson and Rob Pike. I recently launched a significant new product¬†built with Go at work, and it has proved itself out very well in terms of developer productivity and performance. So much so that many other teams are also giving it a go (oh, how punny this language‚Äôs name is).</description></item><item><title>Find and Edit File</title><link>https://tahirhashmi.com/posts/2011/11/24/find-and-edit-file/</link><pubDate>Thu, 24 Nov 2011 10:28:09 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2011/11/24/find-and-edit-file/</guid><description>While working on a huge code-base with several thousand source files, it becomes difficult to remember where each file is. If you use conventions like one file per class, you can at least figure out the file name. E.g. the definition of class Foo would be found in Foo.class.xx or something like that.
Thankfully, ack makes it easy to find the location files in a project. Just say, ack -g Foo.</description></item><item><title>Simple PHP Timer</title><link>https://tahirhashmi.com/posts/2010/08/09/simple-php-timer/</link><pubDate>Mon, 09 Aug 2010 12:23:45 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/08/09/simple-php-timer/</guid><description>I was just trying to profile an HTML page for performance bottle-necks. I‚Äôm trying to follow a top-down approach, wherein I start from the entry script, and find the block of code that takes the biggest chunk of time before digging deeper into that chunk.
At this stage, it‚Äôs not feasible to drop in a full-blown profiling tool like xdebug because of the set-up overhead and amount of data it generates.</description></item><item><title>MySQLdb Leaks Memory</title><link>https://tahirhashmi.com/posts/2010/06/30/mysqldb-leaks-memory/</link><pubDate>Wed, 30 Jun 2010 11:32:30 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/06/30/mysqldb-leaks-memory/</guid><description>Whenever people search for a Python library for MySQL, they get directed to MySQL for Python. However, there are some nasties hidden in it. Searching for ‚Äúmysql python memory leaks‚Äù results in a few links which suggest that using Unicode causes memory leaks with the library.
Today, however, I found another cause for MySQLdb memory leaks, while debugging a leaky Python daemon at work ‚Äî¬†database errors.
Use this script:</description></item></channel></rss>