<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Articles about Software, Photography and more on Tahir Hashmi</title><link>https://tahirhashmi.com/posts/</link><description>Recent content in Articles about Software, Photography and more on Tahir Hashmi</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><managingEditor>mail@tahirhashmi.com (Tahir Hashmi)</managingEditor><webMaster>mail@tahirhashmi.com (Tahir Hashmi)</webMaster><atom:link href="https://tahirhashmi.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Fujifilm X-E4: An Engaging Experience I'd Rather Not Have</title><link>https://tahirhashmi.com/posts/fujifilm-x-e4/</link><pubDate>Thu, 01 Sep 2022 09:47:21 +0700</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/fujifilm-x-e4/</guid><description>When I&amp;rsquo;m on a business trip and I go for breakfast at the hotel&amp;rsquo;s restaurant, I want to take a few photos of the ambience and the food. However, my Nikon D750 feels a bit like an overkill for this job, as does my Nikon D500&amp;hellip; or Z6 or even Z50.
What I want for this occasion is something svelte. Like a Nikon Coolpix A or a Nikon J5. Except the former is as usable as a butter knife for carving steak and the latter is often outdone by an iPhone.</description></item><item><title>Hello Photographers!</title><link>https://tahirhashmi.com/posts/hellophoto/</link><pubDate>Sun, 03 Jul 2022 11:20:45 +0700</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/hellophoto/</guid><description>I hope to write more about photography here soon. In the mean time, do feel free to check out my old photography blog and my flickr photostream.</description></item><item><title>Hello Technologists!</title><link>https://tahirhashmi.com/posts/hellotech/</link><pubDate>Sun, 03 Jul 2022 11:20:36 +0700</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/hellotech/</guid><description>&lt;p>I hope to write more about technology here soon. In the mean time, do feel free to check out my &lt;a href="https://tech.t9i.in">old technology blog&lt;/a>.&lt;/p></description></item><item><title>Using a QLC SSD for Backups. Am I Insane?</title><link>https://tahirhashmi.com/posts/2020/09/10/using-a-qlc-ssd-for-backups-makes-sense/</link><pubDate>Thu, 10 Sep 2020 15:06:37 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2020/09/10/using-a-qlc-ssd-for-backups-makes-sense/</guid><description>I have a properly working Seagate Backup Plus Hub. However, I’m now using a Samsung 870 QVO for Time Machine backups on my Mac, despite its bottom-of-the-pile TBW (durability) rating. It actually makes sense.
The Backstory I have a 2017 iMac (bought that year as well) which I use as my primary home computer for photo/video editing, a bit of programming and a lot of Netflix and HBO Go as well.</description></item><item><title>Buy or Build?</title><link>https://tahirhashmi.com/posts/2020/04/18/buy-or-build/</link><pubDate>Sat, 18 Apr 2020 06:58:04 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2020/04/18/buy-or-build/</guid><description>One of the decisions a CTO has to frequently make is whether to build some piece of functionality in-house or buy it from a third party vendor. In this post, I share my framework for making these decisions.
I also include a case study each for a buy decision and a build decision. Added bonus – some thoughts on whether you should sell something you’ve decided to build.
Functional Complexity One of the most important determinants of buy-vs-build decisions will be the ability to spec out the entire functionality.</description></item><item><title>5 Competitive Advantages in Technology</title><link>https://tahirhashmi.com/posts/2019/01/19/5-competitive-advantages-in-technology/</link><pubDate>Sat, 19 Jan 2019 07:47:52 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2019/01/19/5-competitive-advantages-in-technology/</guid><description>The technology universe is in a constant state of flux with new advancements arriving faster than one could keep up. A technology leader, in this scenario, needs to look for something durable to build the foundation of their new (or improved) technology organisation.
Spending 36 months leading the charge (and occasionally failing) at a fast growing business that’s powered by technology can teach a lot. Coming off the back of a career built with customer-facing development teams at companies serving over 100 million customers, I now have some idea of what it takes to make a strong technology foundation for a modern business.</description></item><item><title>The Best Feature of Go</title><link>https://tahirhashmi.com/posts/2018/06/01/best-feature-of-go/</link><pubDate>Fri, 01 Jun 2018 10:12:41 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2018/06/01/best-feature-of-go/</guid><description>I’ve been programming since the late 90’s and I’ve done quite a bit of coding in C, C++, a lot of it in PHP and some in Python as well. On the front-end I’ve done some JavaScript and I’ve also had the misfortune of programming in Java 😉
I started programming in Go in 2012 and since then I haven’t wanted to program in any other language. I’ve had a handful of large Go implementations across two companies and by now I have my own short list of favourite features.</description></item><item><title>Inheritance Semantics in Go</title><link>https://tahirhashmi.com/posts/2014/01/22/inheritance-semantics-in-go/</link><pubDate>Wed, 22 Jan 2014 11:16:12 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2014/01/22/inheritance-semantics-in-go/</guid><description>Contemporary application design discipline is deeply rooted in Object Oriented Analysis and Design and inheritance is a key concept in OOAD. Go does not support classes and inheritance in their classic OOP sense but since many of us are trained in OOP, the loss of an important design concept sometimes feels restrictive.
Even though I knew about embedding and interfaces, their connection with classic inheritance wasn’t quite obvious. I set out to understand how I could emulate the coarse inheritance semantics in Go, without going into fine nuances.</description></item><item><title>Mapping OO Interfaces to REST</title><link>https://tahirhashmi.com/posts/2013/10/28/mapping-oo-interfaces-to-rest/</link><pubDate>Mon, 28 Oct 2013 09:35:46 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/10/28/mapping-oo-interfaces-to-rest/</guid><description>A few days ago, my BBF (Big Boss Forever) Vijay R asked the following question:
Any resources on how to map OO design (controlled state change via methods) to RESTful services? #help
— Vijay Ramachandran (@vijay750) October 24, 2013
Here’s what I think about it. There are a few things that are very different about designing HTTP APIs as compared to language-native implementation design:
The goal of an HTTP API is to minimise coupling and facilitate interoperability, which is less of a concern when the usage environment is restricted to a single programming language and its runtime</description></item><item><title>The Compiler as a Refactoring Aid</title><link>https://tahirhashmi.com/posts/2013/01/23/the-compiler-as-a-refactoring-aid/</link><pubDate>Wed, 23 Jan 2013 14:15:14 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/01/23/the-compiler-as-a-refactoring-aid/</guid><description>Recently, I sat down to refactor a Go application with a high-level design objective in place. The application had two conceptually separate entities implemented in different files but mashed into a single package. I needed to separate them out into their own packages. I wasn’t using an IDE — just Emacs with basic formatting and non-contextual auto-complete aids.
I started out by creating a new directory for the package to be split out and moved the files that contained most of the relevant code into that directory, without thinking of the consequences.</description></item><item><title>Go Workshop</title><link>https://tahirhashmi.com/posts/2013/01/21/go-workshop/</link><pubDate>Mon, 21 Jan 2013 11:56:29 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/01/21/go-workshop/</guid><description>Last week, I conducted a 2 day Go Workshop at my workplace. It was fun.
I started day 1 with the excellent Go at Google presentation by Rob Pike, followed by my own presentation of Go’s key features. The rest of Day 1 was spent taking the Go Tour.
The coolest thing I did was on day 2. I mirrored my laptop on the projector and went through a fresh install of Go from source on my [newly allocated] dev box.</description></item><item><title>Why I Program in Go</title><link>https://tahirhashmi.com/posts/2013/01/05/why-program-in-go/</link><pubDate>Sat, 05 Jan 2013 11:06:00 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2013/01/05/why-program-in-go/</guid><description>Go is a fresh new programming language, that has come out of Google and is primarily targeted towards server development. It is developed by some very accomplished computer scientists, like Ken Thompson and Rob Pike. I recently launched a significant new product built with Go at work, and it has proved itself out very well in terms of developer productivity and performance. So much so that many other teams are also giving it a go (oh, how punny this language’s name is).</description></item><item><title>Find and Edit File</title><link>https://tahirhashmi.com/posts/2011/11/24/find-and-edit-file/</link><pubDate>Thu, 24 Nov 2011 10:28:09 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2011/11/24/find-and-edit-file/</guid><description>While working on a huge code-base with several thousand source files, it becomes difficult to remember where each file is. If you use conventions like one file per class, you can at least figure out the file name. E.g. the definition of class Foo would be found in Foo.class.xx or something like that.
Thankfully, ack makes it easy to find the location files in a project. Just say, ack -g Foo.</description></item><item><title>Need a new Start-up Idea? Mash up Social and Cloud</title><link>https://tahirhashmi.com/posts/2011/09/19/new-start-up-idea/</link><pubDate>Mon, 19 Sep 2011 10:19:55 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2011/09/19/new-start-up-idea/</guid><description>Are you based out of India and need an idea for a technology start-up? Try thinking of two of the biggest technology buzzwords of the day and mash ’em up together. Social + Cloud!
Back in the ol’ days when system programming and desktop applications were hot, people were trying to create applications that could run on more than one OS. There was a sprouting of libraries, proprietary and open source, that promised abstraction from the operating system internals.</description></item><item><title>Beating the TripAdvisor Badge’s SEO Tactic</title><link>https://tahirhashmi.com/posts/2010/08/24/beating-tripadvisor-seo/</link><pubDate>Tue, 24 Aug 2010 10:16:38 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/08/24/beating-tripadvisor-seo/</guid><description>The Problem Recently, I got a reference to this article from my Product Manager, regarding TripAdvisor badges and how they boost SEO. Their secret is a simple link that links deep into TripAdvisor website and makes your site a donor of link love to TripAdvisor. This is somewhat bad for hotel owners who might find that TripAdvisor trumps the search ranking for their brand name.
The easy solution to prevent that from happening would be to slightly edit TA widget and use a rel=&amp;quot;nofollow&amp;quot; attribute in the anchor that links to TripAdvisor.</description></item><item><title>Simple PHP Timer</title><link>https://tahirhashmi.com/posts/2010/08/09/simple-php-timer/</link><pubDate>Mon, 09 Aug 2010 12:23:45 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/08/09/simple-php-timer/</guid><description>I was just trying to profile an HTML page for performance bottle-necks. I’m trying to follow a top-down approach, wherein I start from the entry script, and find the block of code that takes the biggest chunk of time before digging deeper into that chunk.
At this stage, it’s not feasible to drop in a full-blown profiling tool like xdebug because of the set-up overhead and amount of data it generates.</description></item><item><title>PHP vs. Python for Web Apps</title><link>https://tahirhashmi.com/posts/2010/07/28/php-vs-python-for-web-apps/</link><pubDate>Wed, 28 Jul 2010 12:00:42 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/07/28/php-vs-python-for-web-apps/</guid><description>These days, more and more people ask the Python vs. PHP question when they start out with a web application from scratch. I’ve developed PHP applications for 5 years but for the last couple of years I’ve been doing Python. This post is meant to note some of my observations. If you don’t want to read the whole of it, my opinion — opinion — is to stick with PHP for dishing out your *ML.</description></item><item><title>MySQLdb Leaks Memory</title><link>https://tahirhashmi.com/posts/2010/06/30/mysqldb-leaks-memory/</link><pubDate>Wed, 30 Jun 2010 11:32:30 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/06/30/mysqldb-leaks-memory/</guid><description>Whenever people search for a Python library for MySQL, they get directed to MySQL for Python. However, there are some nasties hidden in it. Searching for “mysql python memory leaks” results in a few links which suggest that using Unicode causes memory leaks with the library.
Today, however, I found another cause for MySQLdb memory leaks, while debugging a leaky Python daemon at work — database errors.
Use this script:</description></item><item><title>{Browse ‘Hello World!’}</title><link>https://tahirhashmi.com/posts/2010/06/18/hello-world/</link><pubDate>Fri, 18 Jun 2010 15:21:35 +0000</pubDate><author>mail@tahirhashmi.com (Tahir Hashmi)</author><guid>https://tahirhashmi.com/posts/2010/06/18/hello-world/</guid><description>That snippet of Oz somehow felt like an appropriate title for the first post on my tech blog. Expect something new here once in a while. Happy hacking! 🙂</description></item></channel></rss>